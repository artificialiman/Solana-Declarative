# Docker Compose configuration for SolD Language Demo
version: '3.8'

services:
  # AI Fraud Detection Engine
  ai-engine:
    build:
      context: ./ai-engine
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - PORT=8000
      - LOG_LEVEL=info
    volumes:
      - ./ai-engine:/app
      - fraud-models:/app/models
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # API Gateway & SolD Parser
  api-gateway:
    build:
      context: ./api
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - PORT=3000
      - AI_FRAUD_API=http://ai-engine:8000
      - SOLANA_NETWORK=devnet
      - NODE_ENV=development
    volumes:
      - ./api:/app
      - ./parser:/app/parser
      - temp-files:/app/temp
    depends_on:
      ai-engine:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Frontend Web Interface
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3001:80"
    volumes:
      - ./frontend:/usr/share/nginx/html:ro
    depends_on:
      - api-gateway
    restart: unless-stopped

volumes:
  fraud-models:
    driver: local
  temp-files:
    driver: local

networks:
  default:
    name: sold-network

---
# AI Engine Dockerfile
# File: ./ai-engine/Dockerfile

FROM python:3.11-slim

WORKDIR /app

# Install system dependencies
RUN apt-get update && apt-get install -y \
    curl \
    gcc \
    && rm -rf /var/lib/apt/lists/*

# Install Python dependencies
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Copy application code
COPY . .

# Create models directory
RUN mkdir -p models

# Expose port
EXPOSE 8000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
  CMD curl -f http://localhost:8000/health || exit 1

# Start the application
CMD ["uvicorn", "fraud_detector:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]

---
# AI Engine Requirements
# File: ./ai-engine/requirements.txt

fastapi==0.104.1
uvicorn[standard]==0.24.0
pandas==2.1.4
numpy==1.24.3
scikit-learn==1.3.2
aiohttp==3.9.1
python-multipart==0.0.6
pydantic==2.5.2

---
# API Gateway Dockerfile  
# File: ./api/Dockerfile

FROM node:18-alpine

WORKDIR /app

# Install system dependencies
RUN apk add --no-cache curl

# Copy package files
COPY package*.json ./
RUN npm ci --only=production

# Copy application code
COPY . .

# Create temp directory
RUN mkdir -p temp

# Expose port
EXPOSE 3000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
  CMD curl -f http://localhost:3000/health || exit 1

# Start the application
CMD ["node", "server.js"]

---
# API Package.json
# File: ./api/package.json

{
  "name": "sold-api-gateway",
  "version": "1.0.0",
  "description": "SolD Language API Gateway",
  "main": "server.js",
  "scripts": {
    "start": "node server.js",
    "dev": "nodemon server.js",
    "test": "jest"
  },
  "dependencies": {
    "express": "^4.18.2",
    "cors": "^2.8.5",
    "helmet": "^7.1.0",
    "express-rate-limit": "^7.1.5",
    "@solana/web3.js": "^1.87.6",
    "@project-serum/anchor": "^0.28.0",
    "axios": "^1.6.2"
  },
  "devDependencies": {
    "nodemon": "^3.0.2",
    "jest": "^29.7.0"
  }
}

---
# Frontend Dockerfile
# File: ./frontend/Dockerfile

FROM nginx:alpine

# Copy static files
COPY . /usr/share/nginx/html/

# Copy custom nginx config
COPY nginx.conf /etc/nginx/conf.d/default.conf

# Expose port
EXPOSE 80

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
  CMD curl -f http://localhost/ || exit 1

---
# Frontend Nginx Config
# File: ./frontend/nginx.conf

server {
    listen 80;
    server_name localhost;
    
    root /usr/share/nginx/html;
    index index.html;
    
    # Handle SPA routing
    location / {
        try_files $uri $uri/ /index.html;
    }
    
    # API proxy to avoid CORS
    location /api/ {
        proxy_pass http://api-gateway:3000/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
    
    # Enable gzip compression
    gzip on;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml;
    
    # Cache static assets
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
    }
}

---
# Development Scripts
# File: ./scripts/start-dev.sh

#!/bin/bash

echo "üöÄ Starting SolD Language Demo..."

# Check if Docker is running
if ! docker info > /dev/null 2>&1; then
    echo "‚ùå Docker is not running. Please start Docker first."
    exit 1
fi

# Build and start services
echo "üî® Building Docker images..."
docker-compose build

echo "üèÉ Starting services..."
docker-compose up -d

# Wait for services to be healthy
echo "‚è≥ Waiting for services to start..."
sleep 10

# Check service health
echo "üè• Checking service health..."

if curl -s http://localhost:8000/health > /dev/null; then
    echo "‚úÖ AI Engine is healthy"
else
    echo "‚ùå AI Engine is not responding"
fi

if curl -s http://localhost:3000/health > /dev/null; then
    echo "‚úÖ API Gateway is healthy"
else
    echo "‚ùå API Gateway is not responding"
fi

if curl -s http://localhost:3001 > /dev/null; then
    echo "‚úÖ Frontend is healthy"
else
    echo "‚ùå Frontend is not responding"
fi

echo ""
echo "üéâ SolD Demo is ready!"
echo "üåê Open http://localhost:3001 in your browser"
echo "üìö API documentation: http://localhost:3000/health"
echo "ü§ñ AI service: http://localhost:8000/health"
echo ""
echo "To stop the demo: docker-compose down"
echo "To view logs: docker-compose logs -f"

---
# Testing Script
# File: ./scripts/test-demo.sh

#!/bin/bash

echo "üß™ Testing SolD Demo..."

API_BASE="http://localhost:3000"

# Test 1: Health check
echo "Test 1: Health check..."
if curl -s "$API_BASE/health" | grep -q "healthy"; then
    echo "‚úÖ Health check passed"
else
    echo "‚ùå Health check failed"
    exit 1
fi

# Test 2: Validate basic SolD code
echo "Test 2: SolD validation..."
BASIC_SOLD='DEVNET\n\n<token name="TestCoin" symbol="TEST" supply="1000000" />\n<timelock duration="100d" />\n<fees recipient="GR8TuDpbnDvuLzW4JBCLjbeLvGFs1p21XBytLx6rA7XD" launch="0.01" />'

RESPONSE=$(curl -s -X POST "$API_BASE/validate" \
  -H "Content-Type: application/json" \
  -d "{\"soldCode\":\"$BASIC_SOLD\"}")

if echo "$RESPONSE" | grep -q '"valid":true'; then
    echo "‚úÖ Validation test passed"
else
    echo "‚ùå Validation test failed: $RESPONSE"
    exit 1
fi

# Test 3: Fee calculation
echo "Test 3: Fee calculation..."
FEE_RESPONSE=$(curl -s -X POST "$API_BASE/calculate-fee" \
  -H "Content-Type: application/json" \
  -d '{"insuranceWallets":["wallet1","wallet2"],"hasLogo":true}')

if echo "$FEE_RESPONSE" | grep -q '"total":0.035'; then
    echo "‚úÖ Fee calculation test passed"
else
    echo "‚ùå Fee calculation test failed: $FEE_RESPONSE"
    exit 1
fi

# Test 4: Invalid SolD should fail
echo "Test 4: Invalid SolD rejection..."
INVALID_SOLD='DEVNET\n\n<token name="SCAM" symbol="SCAM" supply="999999999999" />\n<timelock duration="1h" />\n<fees recipient="GR8TuDpbnDvuLzW4JBCLjbeLvGFs1p21XBytLx6rA7XD" launch="0.01" />'

INVALID_RESPONSE=$(curl -s -X POST "$API_BASE/validate" \
  -H "Content-Type: application/json" \
  -d "{\"soldCode\":\"$INVALID_SOLD\"}")

if echo "$INVALID_RESPONSE" | grep -q '"valid":false'; then
    echo "‚úÖ Invalid SolD rejection test passed"
else
    echo "‚ùå Invalid SolD rejection test failed: $INVALID_RESPONSE"
    exit 1
fi

echo ""
echo "üéâ All tests passed! Demo is working correctly."
echo "üåê Open http://localhost:3001 to try the web interface"

---
# Quick Setup Guide
# File: ./QUICKSTART.md

# SolD Demo - Quick Start Guide

## One-Command Setup

```bash
git clone https://github.com/yourusername/sold-lang
cd sold-lang
chmod +x scripts/start-dev.sh
./scripts/start-dev.sh
```

## Manual Setup (if Docker Compose fails)

```bash
# Start AI Engine
cd ai-engine
python -m venv venv
source venv/bin/activate  # On Windows: venv\Scripts\activate
pip install -r requirements.txt
uvicorn fraud_detector:app --port 8000 &

# Start API Gateway
cd ../api
npm install
AI_FRAUD_API=http://localhost:8000 node server.js &

# Start Frontend
cd ../frontend
python -m http.server 3001 &
```

## Test Everything Works

```bash
./scripts/test-demo.sh
```

## URLs
- **Demo Interface:** http://localhost:3001
- **API Health:** http://localhost:3000/health  
- **AI Service:** http://localhost:8000/health

## Common Issues

**Port conflicts:** Change ports in docker-compose.yml
**Docker not starting:** Check Docker Desktop is running
**Services not healthy:** Check logs with `docker-compose logs`

## For Judges/Reviewers

1. **Run the one-command setup**
2. **Open http://localhost:3001**
3. **Follow the testing scenarios in README.md**
4. **Check generated Anchor code in temp/ folder**
5. **Test API endpoints directly with curl commands**